@page "/delivery"
@using Inventory.Kafka
@using Inventory.Proto.Commands.Inventory.V1
@using ProtoBlockColor = Inventory.Proto.Models.V1.BlockColor
@using BlockColor = Inventory.Database.BlockColor

@inject KafkaFactory Factory
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<PageTitle>Inventory Warehouse System - New Delivery</PageTitle>

<MudLink Href="/">
    <MudButton>
        <MudIcon Icon="@Icons.Material.Filled.ArrowLeft"/>
        Back to Dashboard
    </MudButton>
</MudLink>

<MudCard>
    <MudCardContent>
        <MudText Align="Align.Center" GutterBottom="true">Create Delivery Notice</MudText>
        <div style="text-align: center">
            <div
                style="background-color: @Colors.Red.Darken3; display: inline-block; width: 24px; height: 24px; border-radius: 9999px;"></div>
            <MudIcon Icon="@Icons.Material.Filled.ArrowRight"/>
            <div
                style="background-color: @Colors.Blue.Darken3; display: inline-block; width: 24px; height: 24px; border-radius: 9999px;"></div>
            <MudIcon Icon="@Icons.Material.Filled.ArrowRight"/>
            <div
                style="background-color: @Colors.Yellow.Darken3; display: inline-block; width: 24px; height: 24px; border-radius: 9999px;"></div>
            <MudIcon Icon="@Icons.Material.Filled.ArrowRight"/>
            <div
                style="background-color: @Colors.Green.Darken3; display: inline-block; width: 24px; height: 24px; border-radius: 9999px;"></div>
            <MudIcon Icon="@Icons.Material.Filled.ArrowRight"/>
            <div
                style="border: 2px dashed @Colors.Gray.Darken3; display: inline-block; width: 24px; height: 24px; border-radius: 9999px;"></div>
        </div>
        <div
            style="margin-top: 2rem; margin-bottom: 2rem; display: grid; grid-template-columns: 120px 120px 120px; gap: 8px; justify-content: center;">
            @for (var i = 0; i < 9; i++)
            {
                var idx = i;
                <FormBlock Color="_colors[idx]" OnClick="@(() => ChangeColor(idx))"/>
            }
        </div>
        <div style="text-align: end;">
            <MudButton OnClick="@(() => StartInventoryProcess())" Variant="Variant.Filled" Color="Color.Primary">Start
                Inventory Process
            </MudButton>
        </div>
    </MudCardContent>
</MudCard>

@code {

    private readonly BlockColor?[] _colors = new BlockColor?[9];

    private void ChangeColor(int idx)
    {
        _colors[idx] = _colors[idx] switch
        {
            BlockColor.Red => BlockColor.Blue,
            BlockColor.Blue => BlockColor.Yellow,
            BlockColor.Yellow => BlockColor.Green,
            BlockColor.Green => null,
            null => BlockColor.Red,
        };
        StateHasChanged();
    }

    private async Task StartInventoryProcess()
    {
        if (_colors.Count(b => b is not null) == 0)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        var cmd = new ProcessNewShipment
        {
            ShipmentId = Guid.NewGuid().ToString(),
            Blocks =
            {
                _colors.Select(b => b switch
                {
                    BlockColor.Red => ProtoBlockColor.Red,
                    BlockColor.Blue => ProtoBlockColor.Blue,
                    BlockColor.Yellow => ProtoBlockColor.Yellow,
                    BlockColor.Green => ProtoBlockColor.Green,
                    null => ProtoBlockColor.Unspecified,
                    _ => throw new ArgumentOutOfRangeException(nameof(b), b, null)
                })
            },
        };
        await Factory.SendMessage("commands", cmd);
        NavigationManager.NavigateTo("/");
    }

}

@inject BlockStore Store

@using Inventory.Database
@implements IDisposable

@rendermode InteractiveServer

<MudGrid>
    <MudItem xs="12" sm="6" md="3">
        <BlockStack ColorText="Red" Blocks="Store.ColoredBlocks(BlockColor.Red)"/>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <BlockStack ColorText="Blue" Blocks="Store.ColoredBlocks(BlockColor.Blue)"/>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <BlockStack ColorText="Yellow" Blocks="Store.ColoredBlocks(BlockColor.Yellow)"/>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <BlockStack ColorText="Green" Blocks="Store.ColoredBlocks(BlockColor.Green)"/>
    </MudItem>
</MudGrid>

@code {

    private readonly List<Notification> _notifications = new();

    protected override async Task OnInitializedAsync()
    {
        Store.OnChange += NotificationReceived;
        await base.OnInitializedAsync();
    }

    public void Dispose() => Store.OnChange -= NotificationReceived;

    private void NotificationReceived() => InvokeAsync(StateHasChanged);

}

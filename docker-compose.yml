services:
  zookeeper:
    image: bitnami/zookeeper:latest
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
    restart: unless-stopped
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 3
    ports:
      - 2181:2181

  kafka:
    image: bitnami/kafka:latest
    ports:
      - 9092:9092
      - 7203:7203
    restart: unless-stopped
    healthcheck:
      test: /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list
      interval: 10s
      timeout: 5s
      retries: 3
    environment:
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_INTERNAL://:29092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      zookeeper:
        condition: service_healthy

  inventory-system:
    build:
      context: .
      dockerfile: src/inventory/Dockerfile
    ports:
      - 3000:3000
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy

  sensors:
    build:
      context: .
      dockerfile: src/sensors/Dockerfile
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_HOST=kafka
      - KAFKA_PORT=29092
      - KAFKA_TOPIC=sensors
      - MQTT_HOST=mqtt

  conveyor:
    build:
      context: .
      dockerfile: src/conveyor/Dockerfile
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/healthz']
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
      start_interval: 3s
    environment:
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:29092

  colors:
    build:
      context: .
      dockerfile: src/colors/Dockerfile
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/healthz']
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
      start_interval: 3s
    environment:
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:29092

  picker:
    build:
      context: .
      dockerfile: src/picker/Dockerfile
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/healthz']
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
      start_interval: 3s
    environment:
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:29092
